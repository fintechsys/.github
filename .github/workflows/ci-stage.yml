name: CI Stage Build and Deploy

on:
  workflow_call:
    inputs:
      build_runner:
        description: 'Runner for build job'
        required: true
        type: string
      deploy_runner:
        description: 'Runner for deploy job'
        required: true
        type: string
      image_name:
        description: 'Docker image name with tag'
        required: true
        type: string
      deploy_dir:
        description: 'Deployment directory on server'
        required: true
        type: string
      branch:
        description: 'Branch to checkout for build'
        required: true
        type: string
      harbor_username:
        description: 'Harbor registry username'
        required: true
        type: string
      harbor_password:
        description: 'Harbor registry password'
        required: true
        type: string



jobs:
  build-and-push:
    runs-on: ${{ inputs.build_runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.fintechsys.net
          username: ${{ inputs.harbor_username }}
          password: ${{ inputs.harbor_password }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ inputs.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ${{ inputs.deploy_runner }}
    steps:
      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.fintechsys.net
          username: ${{ inputs.harbor_username }}
          password: ${{ inputs.harbor_password }}

      - name: Deploy to server
        run: |
          echo "Deploying to server..."
          cd ${{ inputs.deploy_dir }}
          
          echo "Pulling latest image..."
          docker pull ${{ inputs.image_name }}
          
          echo "Stopping existing containers..."
          docker compose down
          
          echo "Starting updated containers..."
          docker compose up -d
          
          echo "Deployment completed successfully!"
